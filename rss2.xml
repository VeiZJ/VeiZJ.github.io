<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>VEI</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>选择有时候比努力更重要</description>
    <pubDate>Thu, 17 Aug 2023 12:42:39 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>My New Post</title>
      <link>http://example.com/blog/2023/08/17/My-New-Post/</link>
      <guid>http://example.com/blog/2023/08/17/My-New-Post/</guid>
      <pubDate>Thu, 17 Aug 2023 12:42:39 GMT</pubDate>
      
      
      
      
      
      
      <comments>http://example.com/blog/2023/08/17/My-New-Post/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/blog/2023/08/17/hello-world/</link>
      <guid>http://example.com/blog/2023/08/17/hello-world/</guid>
      <pubDate>Thu, 17 Aug 2023 11:08:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/blog/2023/08/17/hello-world/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vue2环境配置</title>
      <link>http://example.com/blog/2022/02/18/vue2dep/</link>
      <guid>http://example.com/blog/2022/02/18/vue2dep/</guid>
      <pubDate>Fri, 18 Feb 2022 02:25:34 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;proxy配置&lt;br&gt;  浏览器有同源策略，直接从浏览器访问服务器，为了页面安全 则会判断 端口&amp;#x2F;域名&amp;#x2F;协议是否相同。我们可以通过在本地创建服务器来进行访问后台服务器,&lt;br&gt;     本地开发时使用,配置中间代理用于转发ajax 解决跨域问题&lt;br&gt; </description>
        
      
      
      
      <content:encoded><![CDATA[<p>proxy配置<br>  浏览器有同源策略，直接从浏览器访问服务器，为了页面安全 则会判断 端口&#x2F;域名&#x2F;协议是否相同。我们可以通过在本地创建服务器来进行访问后台服务器,<br>     本地开发时使用,配置中间代理用于转发ajax 解决跨域问题<br>    在vue.config.js的 defineConfig 中配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line"><span class="attr">port</span>:<span class="string">&#x27; 9202 &#x27;</span> </span><br><span class="line">proxy：&#123;</span><br><span class="line">  <span class="string">&#x27;/api&#x27;</span>:&#123; </span><br><span class="line"> <span class="comment">//真正地址通过target</span></span><br><span class="line">target：<span class="string">&#x27;http://基本地址&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//路径重写,将api替换</span></span><br><span class="line"><span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27; &#x27;</span>&#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脚手架的模式与环境变量：<br> 开发模式：development<br> 测试模式：test<br> 生产模式：production</p><p>  在根目录下直接创建文件来指定环境变量：<br>    .env.development 在开发模式下被载入<br>    .env.production 在生产模式下被载入</p><p> 一个环境文件只包含环境变量的“键&#x3D;值”对： </p><pre><code>一般以VUE_APP开头</code></pre><p> 基本的服务器路径：</p><p>VUE_APP_NOT_SECRET_CODE&#x3D;’&#x2F;api’    —开发文件中<br>VUE_APP_NOT_SECRET_CODE&#x3D;’服务器路径’  —–生产文件中</p><p>还需要再公共资源地址配置的vue.config.js中配置 publicPath:’’</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/vue2/">vue2</category>
      
      
      <comments>http://example.com/blog/2022/02/18/vue2dep/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>其他</title>
      <link>http://example.com/blog/2022/02/18/minxin/</link>
      <guid>http://example.com/blog/2022/02/18/minxin/</guid>
      <pubDate>Fri, 18 Feb 2022 02:14:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;文件流处理&quot;&gt;&lt;a href=&quot;#文件流处理&quot; class=&quot;headerlink&quot; title=&quot;文件流处理&quot;&gt;&lt;/a&gt;文件流处理&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="文件流处理"><a href="#文件流处理" class="headerlink" title="文件流处理"></a>文件流处理</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">axios的使用</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;地址&#x27;</span>，&#123;</span><br><span class="line"><span class="comment">//识别为文件流blob|arrarBuffer</span></span><br><span class="line"><span class="attr">responseType</span>:<span class="string">&#x27;blob&#x27;</span> </span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">//通过a 标签实现下载</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个下载的地址 URL.creatObject()</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">URL</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObject</span>(res.<span class="property">data</span>)</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//将a.herf的地址设置为URL</span></span><br><span class="line">   a.<span class="property">herf</span> = <span class="variable constant_">URL</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//a 标签的下载</span></span><br><span class="line">  a.<span class="property">download</span>= <span class="string">&#x27;文件名&#x27;</span> <span class="comment">//最好是取请求头里的内容</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//调用a的点击 </span></span><br><span class="line"> a.<span class="title function_">click</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="假数据Mock-js的使用"><a href="#假数据Mock-js的使用" class="headerlink" title="假数据Mock.js的使用"></a>假数据Mock.js的使用</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">- yarn add mockjs</span><br><span class="line">- yarn add @types/mockjs -D    (ts的时候要)</span><br><span class="line"></span><br><span class="line">执行mock/index.<span class="property">ts</span>. 就是在main.<span class="property">ts</span>中引入index.<span class="property">ts</span>文件即可</span><br><span class="line"> </span><br><span class="line">引入：<span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line">注册：<span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&#x27;地址&#x27;</span>，’方式‘，返回的数据)</span><br><span class="line"></span><br><span class="line">工程化<span class="attr">mock</span>: </span><br><span class="line"></span><br><span class="line"> 分模块:<span class="number">1.</span>模块名.<span class="property">mock</span>.<span class="property">js</span></span><br><span class="line"><span class="number">2.</span>在文件夹里面导出一个一个mock接口对象</span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> goodsInfo = &#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/goods/info&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> &#123; </span><br><span class="line">    <span class="comment">// 伪造数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;userInfo&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">创建mock/index.<span class="property">js</span></span><br><span class="line"> 引入所有的接口对象</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 全自动导入所有mock</span></span><br><span class="line"><span class="comment">// 获取到所有的</span></span><br><span class="line"><span class="keyword">let</span> module1 = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&#x27;./*.mock.ts&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(module1);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(module1).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123; <span class="comment">//得到每一个方法</span></span><br><span class="line">  <span class="comment">// console.log(item());</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">item</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">v: any</span>) =&gt;</span> &#123;   <span class="comment">//调用后会得到一个promise</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">values</span>(v).<span class="title function_">forEach</span>(<span class="function">(<span class="params">d: any</span>) =&gt;</span> &#123; <span class="comment">//得到每一个mock接口函数得数据 </span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line">      <span class="title class_">Mock</span>.<span class="title function_">mock</span>(d.<span class="property">url</span>, d.<span class="property">methods</span>, d.<span class="property">data</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// console.log(d);</span></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 半自动</span></span><br><span class="line"><span class="comment">// let arr = [goods, homes]</span></span><br><span class="line"><span class="comment">// import * as goods from &#x27;./goods.mock&#x27;</span></span><br><span class="line"><span class="comment">// import * as homes from &#x27;./home.mock&#x27;</span></span><br><span class="line"><span class="comment">// arr.forEach((item) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   Object.values(item).forEach(v =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     Mock.mock(v.url, v.methods, v.data)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// for (let k in item) &#123;</span></span><br><span class="line"><span class="comment">//   Mock.mock(item[k].url, item[k].methods, item[k].data)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h1 id="XLSX-js处理excecl文件"><a href="#XLSX-js处理excecl文件" class="headerlink" title="XLSX.js处理excecl文件"></a>XLSX.js处理excecl文件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">yarn add xlsx </span><br><span class="line"></span><br><span class="line">引入：</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">XLSX</span> <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line">核心api </span><br><span class="line"></span><br><span class="line">- <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_new</span>()  新建工作簿</span><br><span class="line">- xlsx.<span class="property">utils</span>.<span class="title function_">json_to_sheet</span>(json数组)创建一个sheet，然后给该sheet添加数据</span><br><span class="line">- xlsx.<span class="property">utils</span>.<span class="title function_">aoa_to_sheet</span>(二维数组)创建工作表 数组格式</span><br><span class="line">- xlsx.<span class="property">utils</span>.<span class="property">book_append_sheet</span>： 往工作簿里面添加一个sheet</span><br><span class="line">- xlsx.<span class="title function_">writeFile</span>(工作簿,名称,配置项)  下载生成的excel</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"><span class="comment">// 1. 创建一个工作簿 workbook</span></span><br><span class="line">  <span class="keyword">const</span> workBook = xlsx.<span class="property">utils</span>.<span class="title function_">book_new</span>()</span><br><span class="line">  <span class="comment">// 2. 创建工作表 worksheet</span></span><br><span class="line">  <span class="keyword">const</span> workSheet = xlsx.<span class="property">utils</span>.<span class="title function_">json_to_sheet</span>([</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;王五&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">])</span><br><span class="line">  <span class="comment">// 3. 将工作表放入工作簿中</span></span><br><span class="line">  xlsx.<span class="property">utils</span>.<span class="title function_">book_append_sheet</span>(workBook, workSheet)</span><br><span class="line">  <span class="comment">// 4. 生成数据保存</span></span><br><span class="line">  xlsx.<span class="title function_">writeFile</span>(workBook, <span class="string">`测试.xlsx`</span>, &#123;</span><br><span class="line">    <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Excel</span>导入</span><br><span class="line">   通过<span class="title class_">Elemenui</span> 有上传可得到二进制流的数据。</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">readExecl</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//1 获取文件信息</span></span><br><span class="line">  <span class="keyword">let</span> file = e.<span class="property">raw</span> <span class="comment">// 文件信息</span></span><br><span class="line">  <span class="comment">//创建读取器</span></span><br><span class="line">  <span class="keyword">const</span> fileReader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2 开始读取文件的内容为二进制</span></span><br><span class="line">  fileReader.<span class="title function_">readAsBinaryString</span>(file)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//3 读取完成</span></span><br><span class="line">  fileReader.<span class="property">onload</span> = <span class="function">(<span class="params">ev</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = ev.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4 读取工作簿</span></span><br><span class="line">    <span class="keyword">const</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(data, &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span>, <span class="comment">// 以字符编码的方式解析</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5 获取工作表</span></span><br><span class="line">    <span class="keyword">const</span> exlname = workbook.<span class="property">SheetNames</span>[<span class="number">0</span>]</span><br><span class="line"> <span class="comment">// 取第一张表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6 把工作表变成json格式</span></span><br><span class="line">    <span class="keyword">const</span> exl = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">sheet_to_json</span>(workbook.<span class="property">Sheets</span>[exlname]) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成json表格内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(exl) </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">导入要将文件转为二进制数据 原生<span class="variable constant_">JS</span>有个input框的type属性值为file </span><br><span class="line"></span><br><span class="line"><span class="variable constant_">UI</span>库可直接拿到数据,例如:e.<span class="property">row</span>是转换的数据</span><br><span class="line">  <span class="number">1.</span>浏览器可以读取文件了 通过<span class="keyword">let</span> fileReader =  <span class="keyword">new</span> <span class="title class_">FilReader</span>()</span><br><span class="line">  <span class="number">2.</span>通过fileReader 的 <span class="title function_">readAsBinryString</span>(e.<span class="property">row</span>)</span><br><span class="line">  <span class="number">3.</span>通过读取成功时的函数loud </span><br><span class="line">  <span class="number">4.</span>fileReader.<span class="property">loude</span>=<span class="function">(<span class="params">ev</span>)=&gt;</span>&#123;&#125;函数得到一个读取成功后的数据</span><br><span class="line">  <span class="number">5.</span><span class="variable constant_">XLSX</span>读取数据       <span class="keyword">let</span> book =<span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(ev.<span class="property">target</span>.<span class="property">rults</span>,&#123;<span class="attr">type</span>:<span class="string">&#x27;binary&#x27;</span>&#125;)</span><br><span class="line">  <span class="number">6.</span>拿到一页数据<span class="keyword">let</span> sheet= book.<span class="property">SheetName</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="number">7.</span>根据sheet的名字拿到对应的内容，通过<span class="variable constant_">XLSX</span>.<span class="property">utiles</span>.<span class="property">sheet_to_json</span>拿到转化的数据</span><br></pre></td></tr></table></figure><h1 id="无感刷新token"><a href="#无感刷新token" class="headerlink" title="无感刷新token"></a>无感刷新token</h1><h3 id="axios-token"><a href="#axios-token" class="headerlink" title="axios&amp;token"></a>axios&amp;token</h3><ul><li><p>请求拦截器</p><ul><li>从本地把token拿出来，然后放入header中，带过后端</li></ul></li><li><p>响应式拦截器</p><ul><li>拦截401错误码，跳转到登录页面。【token的过期于否是后端规定】</li></ul></li><li><p>问题：</p><ul><li>场景：假设当前这个token还有10秒过期，用户这个时候填写了一个特别长的表单（填写时间超过10s）。用户辛辛苦苦填写表单，一下子没了（axios拦截到401之后跳转到登录页面）。用户体验非常差。</li></ul></li></ul><h4 id="刷新token（双token刷新策略）"><a href="#刷新token（双token刷新策略）" class="headerlink" title="刷新token（双token刷新策略）"></a>刷新token（双token刷新策略）</h4><ul><li>登录成功之后，后端返回两个token<ul><li>access_token:    请求的时候使用    ——-》  过期时间比较短</li><li>refresh_token： 用来刷新token（换取一个新的token）  —-》过期事件比较长</li></ul></li><li>以后发起请求都带上access_token<ul><li>正常的请求</li></ul></li><li>access_token失效之后<ul><li>以前：拦截401，跳转到登录页面。【糟糕的用户体验】</li><li>现在：重新发起一个请求（刷新token），得到一个新的token。（缓存之前的接口）重新发起请求。</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E7%9A%84%E5%BA%93/">前端常用功能的库</category>
      
      
      <category domain="http://example.com/tags/%E5%85%B6%E4%BB%96/">其他</category>
      
      
      <comments>http://example.com/blog/2022/02/18/minxin/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pinia</title>
      <link>http://example.com/blog/2022/02/18/Pinia/</link>
      <guid>http://example.com/blog/2022/02/18/Pinia/</guid>
      <pubDate>Fri, 18 Feb 2022 02:11:09 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;pinia-vuex升级版-vue3-专用状态管理&quot;&gt;&lt;a href=&quot;#pinia-vuex升级版-vue3-专用状态管理&quot; class=&quot;headerlink&quot; title=&quot;pinia vuex升级版 vue3 专用状态管理&quot;&gt;&lt;/a&gt;pinia vuex升</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="pinia-vuex升级版-vue3-专用状态管理"><a href="#pinia-vuex升级版-vue3-专用状态管理" class="headerlink" title="pinia vuex升级版 vue3 专用状态管理"></a>pinia vuex升级版 vue3 专用状态管理</h1><p>Pinia <a href="https://github.com/vuejs/pinia/commit/06aeef54e2cad66696063c62829dac74e15fd19e">最初是在 2019 年 11 月左右重新设计使用</a> <a href="https://github.com/vuejs/composition-api">Composition API</a> 。从那时起，最初的原则仍然相同，但 Pinia 对 Vue 2 和 Vue 3 都有效，并且不需要您使用组合 API。 除了安装和 SSR 之外，两者的 API 都是相同的，并且这些文档针对 Vue 3，并在必要时提供有关 Vue 2 的注释，以便 Vue 2 和 Vue 3 用户可以阅读</p><h2 id="vuex有啥问题"><a href="#vuex有啥问题" class="headerlink" title="vuex有啥问题"></a>vuex有啥问题</h2><ul><li><p>vuex集中式管理状态</p></li><li><p>流程复杂</p><ul><li>state（放数据） —》 mutation（同步修改数据） —》 action（操作异步，调用mutation）</li><li>建议： mutation 和 action可以合并在一起</li></ul></li><li><p>模块机制</p><ul><li><p>数据结构（属性）</p></li><li><p>每个模块下的mutation和action都是挂载到跟模块，为了区分各个模块mutaion，分配了一个命名空间</p></li><li><p>上诉步骤确实区分开各个模块的mutaion&#x2F;action。。。 代码访问的时候就复杂了。</p><ul><li><p>例子： 我要调用模块seller下的一个M_name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;seller/M_name&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>例子： 我要调用模块seller下的模块test下的M_name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;seller/test/M_name&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>例子，我要访问seller下的name</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">seller</span>.<span class="property">name</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="为什么要使用-Pinia？"><a href="#为什么要使用-Pinia？" class="headerlink" title="为什么要使用 Pinia？#"></a>为什么要使用 Pinia？<a href="https://pinia.web3doc.top/introduction.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8-pinia%EF%BC%9F">#</a></h2><p>Pinia 是 Vue 的存储库，它允许您跨组件&#x2F;页面共享状态。 如果您熟悉 Composition API，您可能会认为您已经可以通过一个简单的 <code>export const state = reactive(&#123;&#125;)</code>. 这对于单页应用程序来说是正确的，但如果它是服务器端呈现的，<strong>会使您的应用程序暴露于安全漏洞</strong>。 但即使在小型单页应用程序中，您也可以从使用 Pinia 中获得很多好处：</p><ul><li>dev-tools 支持<ul><li>跟踪动作、突变的时间线</li><li>Store 出现在使用它们的组件中</li><li>time travel 和 更容易的调试</li></ul></li><li>热模块更换<ul><li>在不重新加载页面的情况下修改您的 Store</li><li>在开发时保持任何现有状态</li></ul></li><li>插件：使用插件扩展 Pinia 功能</li><li>为 JS 用户提供适当的 TypeScript 支持或 <strong>autocompletion</strong></li><li>服务器端渲染支持</li><li><strong>没有mutations</strong>,只有action（写同步，也可以写异步）</li><li><strong>不需要modules</strong>， 多个仓库，你可以理解为一个仓库就是一个模块</li><li><strong>不需要命名空间</strong></li><li><strong>dev-tools变得友好</strong></li><li>编码风格<ul><li>vuex的编码风格： 配置型的</li><li>pinia支持配置型api也支持组合式api【推荐】</li></ul></li></ul><h2 id="安装pinia"><a href="#安装pinia" class="headerlink" title="安装pinia"></a>安装pinia</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line"># 或者使用 npm</span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li><p>全局main.js 配置pinia</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">#引入&amp;使用pinia</span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>语法1 store&#x2F;numStore.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* num pinia模块 */</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useNumstore = <span class="title function_">defineStore</span>(<span class="string">&#x27;numstore&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">//state数据</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//getters</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">doubleNum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">num</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//actions</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="title function_">increase</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">num</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减少</span></span><br><span class="line">    <span class="title function_">decrease</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">num</span>--</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>语法2 hooks语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* num pinia模块 */</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ref,computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useNumstore = <span class="title function_">defineStore</span>(<span class="string">&#x27;numstore&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> num = <span class="title function_">ref</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> doubleNum = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>num.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">        num.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">decrease</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">         num.<span class="property">value</span>--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        num,</span><br><span class="line">        doubleNum,</span><br><span class="line">        increase,</span><br><span class="line">        increase</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;数据num:&#123;&#123; num &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increase&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrease&quot;&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">#导出解构响应式函数</span><br><span class="line">import &#123;storeToRefs, computed&#125; from &#x27;pinia&#x27;</span><br><span class="line">#引入仓库</span><br><span class="line">import &#123;useNumstore&#125; from &#x27;../../store/modules/numStore&#x27;</span><br><span class="line">#创建一个hooks 仓库实例</span><br><span class="line">const $numStore = useNumstore()</span><br><span class="line">#函数直接解构</span><br><span class="line">const &#123;increase, decrease&#125; = $numStore</span><br><span class="line">#数据需要响应式解构</span><br><span class="line">const &#123;num&#125; = storeToRefs($numStore)</span><br><span class="line"></span><br><span class="line">#获取响应式数据方法2 简单</span><br><span class="line">const num  = computed(()=&gt;$numStore.num)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/VUE3/">VUE3</category>
      
      
      <category domain="http://example.com/tags/VUE3/">VUE3</category>
      
      
      <comments>http://example.com/blog/2022/02/18/Pinia/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VITE</title>
      <link>http://example.com/blog/2022/02/18/VITE/</link>
      <guid>http://example.com/blog/2022/02/18/VITE/</guid>
      <pubDate>Fri, 18 Feb 2022 02:07:12 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Vite-构建项目&quot;&gt;&lt;a href=&quot;#Vite-构建项目&quot; class=&quot;headerlink&quot; title=&quot;Vite 构建项目&quot;&gt;&lt;/a&gt;Vite 构建项目&lt;/h1&gt;&lt;p&gt;Vite（法语意为 “快速的”，发音 &lt;code&gt;/vit/&lt;/code&gt;发音同 “</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Vite-构建项目"><a href="#Vite-构建项目" class="headerlink" title="Vite 构建项目"></a>Vite 构建项目</h1><p>Vite（法语意为 “快速的”，发音 <code>/vit/</code>发音同 “veet”)是一种新型前端构建工具，能够显著提升前端开发体验。它主要由两部分组成：</p><ul><li>一个开发服务器，它基于 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ES 模块</a> 提供了 <a href="https://vitejs.cn/guide/features.html">丰富的内建功能</a>，如速度快到惊人的 <a href="https://vitejs.cn/guide/features.html#hot-module-replacement">模块热更新（HMR）</a>。</li><li>一套构建指令，它使用 <a href="https://rollupjs.org/">Rollup</a> 打包你的代码，并且它是预配置的，可输出用于生产环境的高度优化过的静态资源。</li></ul><p>Vite 意在提供开箱即用的配置，同时它的 <a href="https://vitejs.cn/guide/api-plugin.html">插件 API</a> 和 <a href="https://vitejs.cn/guide/api-javascript.html">JavaScript API</a> 带来了高度的可扩展性，并有完整的类型支持。</p><h2 id="运作方式"><a href="#运作方式" class="headerlink" title="运作方式"></a>运作方式</h2><p>Vite 以 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">原生 ESM</a> 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。</p><ul><li>Vite 将会使用 <a href="https://esbuild.github.io/">esbuild</a> <a href="https://vitejs.cn/guide/dep-pre-bundling.html">预构建依赖</a>。Esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。</li></ul><p><img src="https://vitejs.cn/assets/bundler.37740380.png"></p><p><img src="https://vitejs.cn/assets/esm.3070012d.png"></p><h2 id="安装-启动"><a href="#安装-启动" class="headerlink" title="安装 &amp; 启动"></a>安装 &amp; 启动</h2><p><img src="D:/aaa98/个人笔记/vue/vue3/imgs/image-20220704092128035.png" alt="image-20220704092128035"></p><ul><li><p>注意：Vite 需要 <a href="https://nodejs.org/en/">Node.js</a> 版本 &gt;&#x3D; 12.0.0。</p></li><li><p>不使用模板 【推荐】</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#使用 <span class="attr">NPM</span>:  </span><br><span class="line">npm init vite@latest</span><br><span class="line">#yarn </span><br><span class="line">yarn create vite</span><br><span class="line">#pnpm 【推荐】</span><br><span class="line">pnpm create vite</span><br></pre></td></tr></table></figure><ul><li>填写项目名</li><li>选择vue</li><li>选择vue</li><li>安装依赖包</li><li>启动项目</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;vite&quot;</span>,</span><br><span class="line">   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vue-tsc --noEmit &amp;&amp; vite build&quot;</span>,</span><br><span class="line">   <span class="string">&quot;preview&quot;</span>: <span class="string">&quot;vite preview&quot;</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h2 id="vscode-插件推荐-Vue-Language-Features-Volar"><a href="#vscode-插件推荐-Vue-Language-Features-Volar" class="headerlink" title="vscode 插件推荐 Vue Language Features (Volar)"></a>vscode 插件推荐 Vue Language Features (Volar)</h2><ul><li><p>首先保证vscode是最新版本！</p></li><li><p>禁用 vetur插件（卸载vetur）</p></li><li><p>安装</p><ul><li>TypeScript Vue Plugin (Volar)</li><li>Vue Language Features</li></ul></li></ul><h2 id="Vite-config-js配置"><a href="#Vite-config-js配置" class="headerlink" title="Vite.config.js配置"></a>Vite.config.js配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line">#path resolve方法获取本地绝对路径</span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    #别名处理</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>), <span class="comment">//别名 @相当于src 文件夹目录</span></span><br><span class="line">      <span class="comment">//remove i18n waring</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// why remove it , look for https://github.com/vitejs/vite/issues/6026</span></span><br><span class="line">    <span class="comment">// extensions: [&#x27;.js&#x27;, &#x27;.ts&#x27;, &#x27;.jsx&#x27;, &#x27;.tsx&#x27;, &#x27;.json&#x27;, &#x27;.vue&#x27;, &#x27;.mjs&#x27;]</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//本地代理服务器 跨域处理</span></span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 前缀写法</span></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">//scss预处理</span></span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">&quot;@import &#x27;@/assets/scss/_index.scss&#x27;;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装sass"><a href="#安装sass" class="headerlink" title="安装sass"></a>安装sass</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm i sass -D</span><br><span class="line">yarn add sass -D</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/VUE3/">VUE3</category>
      
      
      <category domain="http://example.com/tags/%E6%8F%92%E4%BB%B6/">插件</category>
      
      
      <comments>http://example.com/blog/2022/02/18/VITE/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>three.js入门教学</title>
      <link>http://example.com/blog/2022/02/17/My-oneBlog/</link>
      <guid>http://example.com/blog/2022/02/17/My-oneBlog/</guid>
      <pubDate>Thu, 17 Feb 2022 12:48:09 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;入门开发&quot;&gt;&lt;a href=&quot;#入门开发&quot; class=&quot;headerlink&quot; title=&quot;入门开发&quot;&gt;&lt;/a&gt;入门开发&lt;/h1&gt;&lt;h4 id=&quot;创建世界模型&quot;&gt;&lt;a href=&quot;#创建世界模型&quot; class=&quot;headerlink&quot; title=&quot;创建世界模</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="入门开发"><a href="#入门开发" class="headerlink" title="入门开发"></a>入门开发</h1><h4 id="创建世界模型"><a href="#创建世界模型" class="headerlink" title="创建世界模型"></a>创建世界模型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建场景</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> three.<span class="title class_">Scene</span>()</span><br><span class="line"><span class="comment">// 创建相机</span></span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> three.<span class="title class_">PerspectiveCamera</span>(</span><br><span class="line">  <span class="number">45</span>,<span class="comment">//视角</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">innerWidth</span>/<span class="variable language_">window</span>.<span class="property">innerHeight</span>,<span class="comment">//相机宽高比</span></span><br><span class="line">  <span class="number">0.1</span>,<span class="comment">//近平面 </span></span><br><span class="line">  <span class="number">1000</span><span class="comment">//远平面</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> render = <span class="keyword">new</span> three.<span class="title class_">WebGLRenderer</span>()</span><br><span class="line"><span class="comment">//设置渲染器尺寸大小</span></span><br><span class="line"> render.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>,<span class="variable language_">window</span>.<span class="property">innerHeight</span>)</span><br><span class="line"><span class="comment">// 渲染器添加到页面</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(render.<span class="property">domElement</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建几何体</span></span><br><span class="line"><span class="keyword">const</span> geometry = <span class="keyword">new</span> three.<span class="title class_">BoxGeometry</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建材质</span></span><br><span class="line"><span class="keyword">const</span> matetry = <span class="keyword">new</span> three.<span class="title class_">MeshBasicMaterial</span>(&#123;<span class="attr">color</span>:<span class="string">&quot;red&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// 创建网格:将物体与材质合起来</span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> three.<span class="title class_">Mesh</span>(geometry,matetry)</span><br><span class="line"><span class="comment">// 将物体添加到场景中</span></span><br><span class="line">scene.<span class="title function_">add</span>(cube)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置相机位置</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">5</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">x</span> = <span class="number">5</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">y</span> = <span class="number">5</span></span><br><span class="line">camera.<span class="title function_">lookAt</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加世界坐标辅助器</span></span><br><span class="line"><span class="keyword">const</span> axesHelper = <span class="keyword">new</span> three.<span class="title class_">AxesHelper</span>(<span class="number">5</span>) <span class="comment">//线条的长度</span></span><br><span class="line">scene.<span class="title function_">add</span>(axesHelper)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(animation)</span><br><span class="line">  cube.<span class="property">rotation</span>.<span class="property">x</span> += <span class="number">0.01</span></span><br><span class="line">  cube.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span></span><br><span class="line">  render.<span class="title function_">render</span>(scene,camera)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">animation</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="轨道控制器"><a href="#轨道控制器" class="headerlink" title="轨道控制器"></a>轨道控制器</h4><p>定义： Orbit controls（轨道控制器）可以使得相机围绕目标进行轨道运动。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单独的库需要引进来</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">OrbitControls</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;three/examples/jsm/controls/OrbitControls.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加轨道控制器：让相机围绕物体运动</span></span><br><span class="line"><span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera,render.<span class="property">domElement</span>)<span class="comment">//此处需要设置为画布 不然设置body会阻塞body的其他事件</span></span><br><span class="line">controls.<span class="property">enableDamping</span>=<span class="literal">true</span> <span class="comment">//设置带有阻尼惯性</span></span><br><span class="line">controls.<span class="property">dampingFactor</span>=<span class="number">0.01</span> <span class="comment">//阻尼系数</span></span><br></pre></td></tr></table></figure><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><h5 id="三维向量（Vector3）"><a href="#三维向量（Vector3）" class="headerlink" title="三维向量（Vector3）"></a>三维向量（Vector3）</h5><p>该类表示的是一个三维向量（3D <a href="https://en.wikipedia.org/wiki/Vector_space">vector</a>）。 一个三维向量表示的是一个有顺序的、三个为一组的数字组合（标记为x、y和z）， 可被用来表示很多事物，例如：</p><ul><li>一个位于三维空间中的点。</li><li>一个在三维空间中的方向与长度的定义。在three.js中，长度总是从(0, 0, 0)到(x, y, z)的 <a href="https://en.wikipedia.org/wiki/Euclidean_distance">Euclidean distance</a>（欧几里德距离，即直线距离）， 方向也是从(0, 0, 0)到(x, y, z)的方向。</li><li>任意的、有顺序的、三个为一组的数字组合。</li></ul><p>其他的一些事物也可以使用二维向量进行表示，比如说动量矢量等等； 但以上这些是它在three.js中的常用用途。</p><p>构造函数  Vector3( x : Float, y : Float, z : Float )</p><p>x - 向量的x值，默认为<strong>0</strong>。<br>y - 向量的y值，默认为<strong>0</strong>。<br>z - 向量的z值，默认为<strong>0</strong>。</p><h5 id="欧拉角（Euler）"><a href="#欧拉角（Euler）" class="headerlink" title="欧拉角（Euler）"></a>欧拉角（Euler）</h5><p>表示 <a href="http://en.wikipedia.org/wiki/Euler_angles">Euler</a> 的类。</p><p>欧拉角描述一个旋转变换，通过指定轴顺序和其各个轴向上的指定旋转角度来旋转一个物体。</p><p>构造器 Euler( x : Float, y : Float, z : Float, order : String )</p><p>x - (optional) 用弧度表示x轴旋转量。 默认值是 <strong>0</strong>。<br>y - (optional) 用弧度表示y轴旋转量。 默认值是 <strong>0</strong>。<br>z - (optional) 用弧度表示z轴旋转量。 默认值是 <strong>0</strong>。<br>order - (optional) 表示旋转顺序的字符串，默认为’XYZ’（必须是大写）。</p><h4 id="三维物体属性"><a href="#三维物体属性" class="headerlink" title="三维物体属性"></a>三维物体属性</h4><p>position定义：表示对象的局部位置，有父元素根据父元素的位置进行移动，没得父元素则是根据世界坐标系来进行移动，是一个三维向量。 position.x&#x2F;y&#x2F;z 可单独设置某个坐标的位置。positon.set（三维坐标）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建几何体</span></span><br><span class="line"><span class="keyword">const</span> geometry = <span class="keyword">new</span> three.<span class="title class_">BoxGeometry</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 创建材质</span></span><br><span class="line"><span class="keyword">const</span> matetry = <span class="keyword">new</span> three.<span class="title class_">MeshBasicMaterial</span>(&#123;<span class="attr">color</span>:<span class="string">&quot;red&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> matetry1 = <span class="keyword">new</span> three.<span class="title class_">MeshBasicMaterial</span>(&#123;<span class="attr">color</span>:<span class="string">&quot;green&quot;</span>&#125;)</span><br><span class="line"><span class="comment">// 创建网格:将物体与材质合起来</span></span><br><span class="line"><span class="keyword">const</span> parentCube = <span class="keyword">new</span> three.<span class="title class_">Mesh</span>(geometry,matetry1)  <span class="comment">//创建一个父类物体 </span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> three.<span class="title class_">Mesh</span>(geometry,matetry)</span><br><span class="line"><span class="comment">// 将子类添加到父类物体 此时子类的位移就是相对于父类物体了</span></span><br><span class="line">parentCube.<span class="property">position</span>.<span class="title function_">set</span>(-<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 物体的位置</span></span><br><span class="line">cube.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cube.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">parentCube.<span class="title function_">add</span>(cube)</span><br><span class="line"><span class="comment">// 将物体添加到场景中</span></span><br><span class="line">scene.<span class="title function_">add</span>(parentCube)<span class="comment">//呈现结果 父类盒子在x轴-3的到位置 子类盒子会在世界坐标系得远点上</span></span><br></pre></td></tr></table></figure><p>scale定义：一个三维物体的局部缩放，有父级则相对于父级的尺寸进行缩放，没有父级则是默认值。也是一个三维向量。scale.set（三维坐标）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parentCube = <span class="keyword">new</span> three.<span class="title class_">Mesh</span>(geometry,matetry1)  <span class="comment">//创建一个父类物体 </span></span><br><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> three.<span class="title class_">Mesh</span>(geometry,matetry)</span><br><span class="line"><span class="comment">// 缩放：也视局部的缩放，有父级则相对于父级进行缩放，无父级则默认缩放</span></span><br><span class="line">parentCube.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">cube.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">parentCube.<span class="title function_">add</span>(cube)</span><br><span class="line"><span class="comment">// 将父类物体添加到场景中</span></span><br><span class="line">scene.<span class="title function_">add</span>(parentCube)</span><br></pre></td></tr></table></figure><p>  rotation定义： 物体的局部旋转，以弧度来表示。 如果有父级物体 他会收到父级物体的旋转，会在父级的基础上再进行旋转，反之则不会。rotation.x&#x2F;y&#x2F;z  或 rotation.set(三维坐标)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 旋转：局部旋转 会受到父元素的旋转影响</span><br><span class="line">parentCube.rotation.x = Math.PI/4</span><br><span class="line">cube.rotation.x = Math.PI/4</span><br></pre></td></tr></table></figure><h4 id="屏幕自适应"><a href="#屏幕自适应" class="headerlink" title="屏幕自适应"></a>屏幕自适应</h4><p>监听window 视窗大小让画面实时变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自适应屏幕大小</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 重新设置渲染器的宽高比</span></span><br><span class="line">  render.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>,<span class="variable language_">window</span>.<span class="property">innerHeight</span>) </span><br><span class="line">  <span class="comment">// 重置相机的宽高比</span></span><br><span class="line">  camera.<span class="property">aspect</span>= <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">  <span class="comment">// 更新相机的投影矩阵</span></span><br><span class="line">  camera.<span class="title function_">updateProjectionMatrix</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 开启全屏</span><br><span class="line">const btn = document.createElement(&#x27;button&#x27;)</span><br><span class="line">btn.innerHTML= &#x27;全屏&#x27;</span><br><span class="line">btn.addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">  // 要body进行全屏 而不是画布 不然按钮就看不见了</span><br><span class="line">  // render.domElement.requestFullscreen()</span><br><span class="line">  document.body.requestFullscreen()</span><br><span class="line">&#125;)</span><br><span class="line">btn.style.position = &#x27;absolute&#x27;</span><br><span class="line">btn.style.top = &#x27;20px&#x27;</span><br><span class="line">btn.style.left = &#x27;20px&#x27;</span><br><span class="line">btn.style.zIndex = &#x27;9999&#x27;</span><br><span class="line">document.body.appendChild(btn)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/ThreeJs/">ThreeJs</category>
      
      
      <category domain="http://example.com/tags/ThreeJS/">ThreeJS</category>
      
      
      <comments>http://example.com/blog/2022/02/17/My-oneBlog/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
